#todo deprecate ?
dockerRegistry: ""

appProxy:
  enabled: false
  image: "quay.io/codefresh/cf-app-proxy:latest"
  env: { }
  ingress:
    pathPrefix: ""
    class: ""
    host: ""
    tlsSecret: ""
    annotations: { }

#Todo refactor cloud setup to different object such as azure /aws
newRelicLicense:

monitor:
  image: "quay.io/codefresh/agent:stable"
  clusterId: ""
  enabled: false
  helm3: false
  token: ""
  env: { }

venona:
  image: "docker.io/codefresh/venona:1.6.4"

volumeProvisioner:
  resources:
  image: "quay.io/codefresh/dind-volume-provisioner:1.29.1"
  mountAzureJson:
  createDindVolDirResouces:
    requests:
      cpu:
      memory:
    limits:
      cpu:
      memory:
#todo add envvars

aws:
  accessKeyId:
  secretAccessKey:

#todo restructure storage field
storage:
  createStorageClass: true
  # TODO Verify we have no control over storageclass
  storageClassName: dind-local-volumes-runner-codehelm
  # TODO Remake volume definition for all types of storages
  backend: local

  local:
    volumeParentDir: /var/lib/codefresh/dind-volumes

  gce:
    volumeType: ""
    availabilityZone: ""
    serviceAccountJson: ""

  ebs:
    volumeType: ""
    availabilityZone: ""
    encrypted: ""
    kmsKeyId: ""
    accessKeyId: ""
    secretAccessKey: ""

  azure:
    resourceGroup: ""
    location: ""
    cachingMode: ""
    skuName: ""

  fsType: "ext4"

  #     resources:
  #       limits:
  #         cpu: 400m
  #         memory: 1200Mi
  #       requests:
  #         cpu: 200m
  #         memory: 500Mi

# todo tolerations
#tolerations: [ ]

global:
  namespace: ""
  codefreshHost: ""
  agentToken: ""
  agentId: ""
  agentName: ""
  accountId: ""
  runtimeName: ""
  keys:
    key: ""
    csr: ""
    ca: ""
    serverCert: ""
